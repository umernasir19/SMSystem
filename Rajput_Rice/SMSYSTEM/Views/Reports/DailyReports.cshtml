@model HrProperty.Models.Report_Manager
@{
    ViewBag.Title = "PurchaseReturn";
}

<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1>Daily Reports</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Home</a></li>
                    <li class="breadcrumb-item active">Daily Reports</li>
                </ol>
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>
<!-- Main content -->
<section class="content">
    <div class="row">
        <div class="col-12">
            <!-- /.card -->
            <div class="card">
                <div class="card-header">
                    <form role="form" id="formadddemptype">
                        <div class="row">
                            <div class="col-sm-4">
                                <!-- text input -->
                                <div class="form-group">
                                    <label>Select Report*:</label>
                                   @Html.DropDownListFor(model => model.ReportID, new List<SelectListItem>
                        {
                        new SelectListItem() {Text = "Please Select Report's", Value=""},
                        new SelectListItem() {Text = "Daily Purchase Report", Value="1"},
                        new SelectListItem() {Text = "Daily Sales Report", Value="2"}
                        },
new { @Class = "form-control font-weight-bold" })
                                    @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                                </div>
                                @Html.ValidationMessageFor(model => model.ReportID, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-sm-4">
                                <!-- text input -->
                                <div class="form-group">
                                    <label>Date From*:</label>
                                    @Html.EditorFor(model => model.From, new { htmlAttributes = new { @placeholder = "Last Institue Name", @class = "form-control"} })
                                    @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                                </div>
                                @Html.ValidationMessageFor(model => model.From, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-sm-4">
                                <!-- text input -->
                                <div class="form-group">
                                    <label>Date To*:</label>
                                    @Html.EditorFor(model => model.To, new { htmlAttributes = new { @placeholder = "Last Institue Name", @class = "form-control" } })
                                    @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                                </div>
                                @Html.ValidationMessageFor(model => model.To, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </form>

                    <h3 class="card-title"><button class="btn btn-primary" id="searchpayments">Search Report</button></h3>
                </div>
                <!-- /.card-header -->
                <div class="card-body">
                    <table id="example1" class="table table-bordered table-striped">
                        <thead>
                            <tr>

                                <th>Product Name</th>
                                <th>Stock in Inventory</th>
                                <th>Inventory Amount</th>
                                <th>Purchase Qty</th>
                                <th>Purchasing Amount</th>
                                <th>Total Amount</th>


                                <th>Actions(s)</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                        <tfoot align="right">
                            <tr><th></th><th></th><th></th></tr>
                        </tfoot>
                    </table>
                </div>
                <!-- /.card-body -->
            </div>
            <!-- /.card -->
        </div>
        <!-- /.col -->
    </div>
    <!-- /.row -->
</section>
<!-- /.content -->
@*<div class="modal fade" id="modal-default" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Return</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modelbody">
                <div class="card-body">
                    <form role="form" id="paymentform">
                        @Html.HiddenFor(model => model.prchsdtlid)
                        <div class="row">
                            <div class="col-sm-3">
                                <!-- text input -->
                                <div class="form-group">
                                    <label>Purchase Qty*:</label>
                                    @Html.EditorFor(model => model.Purchaseqty, new { htmlAttributes = new { @placeholder = "", @class = "form-control", @readonly = true } })
                                </div>
                            </div>
                            <div class="form-group">
                                <label>Purchasing Unit Cost:</label>
                                @Html.EditorFor(model => model.unitprice, new { htmlAttributes = new { @placeholder = "", @class = "form-control", @readonly = true } })
                             
                            </div>

                            <div class="col-sm-3">
                                <!-- text input -->
                                <div class="form-group">
                                    <label>Purhcase Amount Total:</label>
                                    @Html.EditorFor(model => model.PurchaseAmnt, new { htmlAttributes = new { @placeholder = "Paid Amount*:", @class = "form-control", @readonly = true } })
                                </div>

                            </div>

                            <div class="col-sm-3">
                                <!-- text input -->
                                <div class="form-group">
                                    <label>Availble QTy Stock*:</label>
                                    @Html.EditorFor(model => model.StockQty, new { htmlAttributes = new { @placeholder = "Paid Amount*:", @class = "form-control", @readonly = true } })
                                </div>

                            </div>

                            <div class="col-sm-3">
                                <!-- text input -->
                                <div class="form-group">
                                    <label>Invoice Balance Amount*:</label>
                                    @Html.EditorFor(model => model.balanceamount, new { htmlAttributes = new { @placeholder = "Paid Amount*:", @class = "form-control", @readonly = true } })
                                </div>

                            </div>
                            <div class="col-sm-3">
                                <!-- text input -->
                                <div class="form-group">
                                    <label>Item Balance Amount*:</label>
                                    @Html.EditorFor(model => model.itembalance, new { htmlAttributes = new { @placeholder = "Paid Amount*:", @class = "form-control", @readonly = true } })
                                </div>

                            </div>
                            <div class="col-sm-3">
                                <!-- text input -->
                                <div class="form-group">
                                    <label>Qty To Return*:</label>
                                    @Html.EditorFor(model => model.returnqty, new { htmlAttributes = new { @placeholder = "Paid Amount*:", @class = "form-control" } })
                                </div>

                            </div>

                        </div>

                    </form>
                </div>
            </div>

            <div class="modal-footer justify-content-between">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" id="paytovendor" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
    <!-- /.modal-content -->
</div>*@
<!-- /.modal-dialog -->
<!-- /.modal -->
<!-- /.modal -->
<!-- ./wrapper -->
@section MyScripts{
    <script type="text/javascript">
        var dataTable;
        var searchdata;
        $(document).ready(function () {
           // bindDataToTable();
        });
        //show popup
        //show popup
        $("#btnaddnewpopup").click(function () {
            //$.post("/Customer/AddCustomer", function (data) {
            //    $("#modal-default").html(data);
            //});

            $("#modelbody").load("/Purchase/AddPurchase", function (e) {
                $("#modal-default").modal("show");


            });

        })







        $(function () {
            //$("#example1").DataTable();
            //$('#example2').DataTable({
            //    "paging": true,
            //    "lengthChange": false,
            //    "searching": false,
            //    "ordering": true,
            //    "info": true,
            //    "autoWidth": false,
            //});
        });


        function bindDataToTable() {
            $.ajax({
                url: "/Product/ViewALLProductType",
                success: function (data) {
                    console.log(data);
                    bindCustomersInDataTable(data);
                }
            });
        }

        function bindCustomersInDataTable(data) {
           // bindvaluesinModal(data);
            $('#example1').DataTable().clear().destroy();
            var status = "Blocked".toString();
            var table = $('#example1').DataTable({
                data: data,// JSON.parse(data.data),
                columns: [

                    { data: 'productname' },
                    { data: 'inventorystock' },
                    { data: 'inventoryunitprice' },
                    { data: 'purchaseqty' },
                    { data: 'purchaseunitprice' },
                    { data: 'purchasetotalamount' },
                    {
                        "data": "dtlid",
                        "render": function (ID, type, full, meta) {

                            return '<a href="#" class="btn btn-info" onclick="ShowEmployee(' + ID + ')"><i class="fa fa-eye"></i></a>'

                        },
                        "orderable": true,
                        "searchable": true,


                    }
                ]//,
                //"footerCallback": function (row, data, start, end, display) {
                //    var api = this.api(), data;

                //    // converting to interger to find total
                //    var intVal = function (i) {
                //        return typeof i === 'string' ?
                //            i.replace(/[\$,]/g, '') * 1 :
                //            typeof i === 'number' ?
                //            i : 0;
                //    };

                //    // computing column Total of the complete result
                //    var monTotal = api
                //        .column(1)
                //        .data()
                //        .reduce(function (a, b) {
                //            return intVal(a) + intVal(b);
                //        }, 0);






                //    // Update footer by showing the total with the reference of the column index
                //    $(api.column(0).footer()).html('Total');
                //    $(api.column(1).footer()).html(monTotal);

                //}


            });


        }
        function bindvaluesinModal(data) {
            // console.log(data);
            searchdata = data;
            console.log(data);
            $("#prchsdtlid").val(data[0].pdid);
            $("#Purchaseqty").val(data[0].purchasedstock);
            $("#StockQty").val(data[0].availblestock);
            $("#PurchaseAmnt").val(data[0].totalamount);
            $("#balanceamount").val(data[0].balanceamount);
            $("#itembalance").val(data[0].itembalance);
            $("#unitprice").val(data[0].purchaseunitprice);

        }
        function ShowEmployee(paymentid) {
            $.post("/Purchase/CheckInverntoryforProductStock?id=" + paymentid, function (data) {
                bindvaluesinModal(data.data);
               // $("#modal-default").html(data);
            });

            //var $row = $(this).closest("tr");    // Find the row
            //var $text = $row.find(".nr").text(); // Find the text

            //// Let's test it out
            //alert($text);
            // window.location.href = url;
            //var
            //$("#modelbody").load(url, function (e) {
            //    var id = $('#Customer_Id').val();
            //    if (id > 0) {
            //        $('#btnaddnewcustomer').html("update ");
            //    }
            $("#AccountId").val(paymentid);
               $("#modal-default").modal("show");
            //});
        }

        function ConfirmDelete(CustomerID) {
            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: 'btn btn-success',
                    cancelButton: 'btn btn-danger'
                },
                buttonsStyling: false
            })

            swalWithBootstrapButtons.fire({
                title: 'Are you sure?',
                text: "",
                type: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, Delete!',
                cancelButtonText: 'No, cancel!',
                reverseButtons: true
            }).then((result) => {
                if (result.value) {
                    $.ajax({
                        type: 'GET',
                        url: '/Employee/DeleteEmployee?id=' + CustomerID,
                        dataType: 'JSON',
                        success: function (res) {
                            if (res.success) {
                                swalWithBootstrapButtons.fire(
                                    'Done!',
                                    'Blocked',
                                    'success'
                                    )
                                window.location.href = "/Employee/ViewEmployee"
                            }
                            else {
                                swalWithBootstrapButtons.fire(
                                    'Error!',
                                    'Failes',
                                    'success'
                                    )
                            }
                        },
                        failure: function (res) {
                            console.log(res);
                        },
                        err: function (res) {
                            console.log(res);
                        }
                    })




                } else if (
                    /* Read more about handling dismissals below */
                  result.dismiss === Swal.DismissReason.cancel
                ) {
                    swalWithBootstrapButtons.fire(
                      'Cancelled',
                      '',
                      'error'
                    )
                }
            })

        }
        $("#PaidAmount").keyup(function () {
            var PaidAmount = $(this).val();
            var totalAmount = $("#totalAmount").val();
            var balnceamount = totalAmount - PaidAmount;

            $("#balanceamount").val(balnceamount);
        });



        //add milestone button event
        $('#searchpayments').click(function (e) {
            e.preventDefault();

            var form = $("#formadddemptype");


            //console.log(ch);
            //formdata.append("RemeberMe", ch);
            //console.log(formdata);
            //    debugger;
            $.validator.unobtrusive.parse(form);
            if ($(form).valid()) {
                $.ajax({
                    type: "POST",
                    url: "/Reports/GetDailyReport",
                    data: $(form).serialize(),
                    //cache : false,
                    //processData: false,
                    success: function (res) {
                        //alert("afd");
                        bindCustomersInDataTable(res.data);
                        //if (res.success && res.statuscode == 200) {
                        //    Command: toastr["success"]("success", res.msg)

                        //    toastr.options = {
                        //        "closeButton": false,
                        //        "debug": false,
                        //        "newestOnTop": false,
                        //        "progressBar": true,
                        //        "positionClass": "toast-top-center",
                        //        "preventDuplicates": false,
                        //        "onclick": null,
                        //        "showDuration": "300",
                        //        "hideDuration": "1000",
                        //        "timeOut": "5000",
                        //        "extendedTimeOut": "1000",
                        //        "showEasing": "swing",
                        //        "hideEasing": "linear",
                        //        "showMethod": "fadeIn",
                        //        "hideMethod": "fadeOut"
                         // }
                        //    window.location.href = res.url;
                        //}
                        //else if (res.success == true && res.statuscode == 300) {
                        //        Command: toastr["error"]("Error", res.msg)

                        //    toastr.options = {
                        //        "closeButton": false,
                        //        "debug": false,
                        //        "newestOnTop": false,
                        //        "progressBar": true,
                        //        "positionClass": "toast-top-center",
                        //        "preventDuplicates": false,
                        //        "onclick": null,
                        //        "showDuration": "300",
                        //        "hideDuration": "1000",
                        //        "timeOut": "5000",
                        //        "extendedTimeOut": "1000",
                        //        "showEasing": "swing",
                        //        "hideEasing": "linear",
                        //        "showMethod": "fadeIn",
                        //        "hideMethod": "fadeOut"
                        //    }
                       // }
                    },
                    failure: function (res) {
                        console.log(res);
                    },
                    err: function (res) {
                        console.log(res);
                    }

                })
            }
            else {
                return false;
            }



        });
        function checkvalidationofQty() {
            var qtyrtn = $("#returnqty").val();
            var itemblnceamount = $("#itembalance").val();
            var purchaseunitprice = $("#unitprice").val();
            var rtrngamnt = qtyrtn * purchaseunitprice;
            if (rtrngamnt > itemblnceamount) {


                toastr.options = {
                    "closeButton": false,
                    "debug": false,
                    "newestOnTop": false,
                    "progressBar": false,
                    "positionClass": "toast-top-center",
                    "preventDuplicates": false,
                    "onclick": null,
                    "showDuration": "300",
                    "hideDuration": "1000",
                    "timeOut": "5000",
                    "extendedTimeOut": "1000",
                    "showEasing": "swing",
                    "hideEasing": "linear",
                    "showMethod": "fadeIn",
                    "hideMethod": "fadeOut"
                }
                Command: toastr["error"]("Returning Qty Amount is greator then remaining amount", "Returning Qty amount is greater then Balnce amount!")
                return false;
            }
            else {
                return true;
            }
        }
        $('#paytovendor').click(function (e) {
            e.preventDefault();
            if (searchdata[0].availblestock < $("#returnqty").val()) {
                alert("Return Qty ust be less then availble Qty");
                return;
            }
            if ($("#returnqty").val() >searchdata[0].purchasedstock  ) {
                alert("Return Qty ust be less then/equal to Purchased Qty");
                return;
            }
            if (!checkvalidationofQty()) {
                //alert("Return Qty ust be less then/equal to Purchased Qty");
                return;
            }
            var form = $("#paymentform");
            var formdata = new FormData(form[0]);


            console.log(searchdata);
           // formdata.append("vendor_Id", searchdata[0].vendorIdx);
           // formdata.append("DueDate", moment(searchdata[0].DueDate).format('YYYY-MM-DD'));
            for (var value of formdata.values()) {
                console.log(value);
            }
            console.log(formdata);

           // $.validator.unobtrusive.parse(form);
            if ($(form).valid()) {
                $.ajax({
                    type: "POST",
                    url: "/Purchase/ReturnPurchase",
                    data:formdata,// $(form).serialize(),
                    contentType: false,
                    processData: false,
                    cache: false,
                    success: function (res) {
                        //alert("afd");
                        bindCustomersInDataTable(res.data);
                        //if (res.success && res.statuscode == 200) {
                        //    Command: toastr["success"]("success", res.msg)

                        //    toastr.options = {
                        //        "closeButton": false,
                        //        "debug": false,
                        //        "newestOnTop": false,
                        //        "progressBar": true,
                        //        "positionClass": "toast-top-center",
                        //        "preventDuplicates": false,
                        //        "onclick": null,
                        //        "showDuration": "300",
                        //        "hideDuration": "1000",
                        //        "timeOut": "5000",
                        //        "extendedTimeOut": "1000",
                        //        "showEasing": "swing",
                        //        "hideEasing": "linear",
                        //        "showMethod": "fadeIn",
                        //        "hideMethod": "fadeOut"
                        // }
                        //    window.location.href = res.url;
                        //}
                        //else if (res.success == true && res.statuscode == 300) {
                        //        Command: toastr["error"]("Error", res.msg)

                        //    toastr.options = {
                        //        "closeButton": false,
                        //        "debug": false,
                        //        "newestOnTop": false,
                        //        "progressBar": true,
                        //        "positionClass": "toast-top-center",
                        //        "preventDuplicates": false,
                        //        "onclick": null,
                        //        "showDuration": "300",
                        //        "hideDuration": "1000",
                        //        "timeOut": "5000",
                        //        "extendedTimeOut": "1000",
                        //        "showEasing": "swing",
                        //        "hideEasing": "linear",
                        //        "showMethod": "fadeIn",
                        //        "hideMethod": "fadeOut"
                        //    }
                        // }
                    },
                    failure: function (res) {
                        console.log(res);
                    },
                    err: function (res) {
                        console.log(res);
                    }

                })
            }
            else {
                return false;
            }



        });




    </script>
}