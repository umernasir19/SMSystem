
@model HrProperty.Models.PurchaseVM
@{
    Layout = null;
}

<div class="card-body">
    <form role="form" id="purchaseform">
        @Html.HiddenFor(model => model.idx, new { id = "natureOfVisitField", value = 0 })
        <div class="row">
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>Product Type*:</label>
                    @Html.DropDownListFor(model => model.vendorIdx, new SelectList(Model.VendorLST, "idx", "vendorName"), "Select VEndor", new { @Class = "form-control font-weight-bold" })
                    @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                </div>
                @Html.ValidationMessageFor(model => model.vendorIdx, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>PO Number*:</label>
                    @Html.EditorFor(model => model.poNumber, new { htmlAttributes = new { @placeholder = "PO Number*:", @class = "form-control",@readonly=true } })
                    @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                </div>
                @Html.ValidationMessageFor(model => model.poNumber, "", new { @class = "text-danger" })
            </div>
            <div class="col-sm-3">
                <!-- text input -->
                <div class="form-group">
                    <label>purchase Date*:</label>
                    @Html.EditorFor(model => model.purchaseDate, new { htmlAttributes = new { @placeholder = "purchase Date*:", @class = "form-control" } })
                    @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                </div>
                @Html.ValidationMessageFor(model => model.purchaseDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <hr />

        <div class="row" id="PurchaseDetails">
            <div class="col-md-12">
                <div class="card card-primary">
                    <div class="card-header">
                        <h3 class="card-title">Purchase Details</h3>

                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse" data-toggle="tooltip" title="Collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                        </div>
                    </div>

                    <div class="card-body">

                        <div class="row">
                            <div class="col-sm-12">
                                <div class="row">
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            <label for="inputName">Item Name</label>
                                            @Html.DropDownListFor(model => model.itemIdx, new SelectList(Model.ProductList, "idx", "itemName"), "Select Product", new { @Class = "form-control font-weight-bold" })


                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            <label for="inputProjectLeader">Qty</label>
                                            @Html.EditorFor(model => model.qty, new { htmlAttributes = new { @placeholder = "Qty", @class = "form-control" } })
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            <label for="inputProjectLeader">Unit Price</label>
                                            @Html.EditorFor(model => model.unitPrice, new { htmlAttributes = new { @placeholder = "Unit Price", @class = "form-control" } })
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            <label for="inputProjectLeader">Total Price</label>
                                            @Html.EditorFor(model => model.amount, new { htmlAttributes = new { @placeholder = "Total Price", @class = "form-control", @readonly = true } })
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            <label for="inputProjectLeader">Due Date</label>
                                            @Html.EditorFor(model => model.DueDate, new { htmlAttributes = new { @placeholder = "Unit Price", @class = "form-control" } })
                                        </div>
                                    </div>
                                    <div class="col-sm-2">
                                        <div class="form-group">
                                            <label for="inputProjectLeader">.</label>
                                            <input type="button" class="btn btn-primary form-control" value="Add Item" id="btnaddtogrid" />
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>

                        <div class="row" style="display:none; overflow:scroll" id="milestones">
                            <div class="col-md-12">
                                <div class="card card-primary">
                                    <div class="card-header">
                                        <h3 class="card-title">Product List</h3>

                                        <div class="card-tools">
                                            <button type="button" class="btn btn-tool" data-card-widget="collapse" data-toggle="tooltip" title="Collapse">
                                                <i class="fas fa-minus"></i>
                                            </button>
                                        </div>
                                    </div>

                                    <div class="card-body">

                                        <table id="example2" class="table table-bordered table-striped">
                                            <thead>
                                                <tr>
                                                    <th>Product Name</th>
                                                    <th>Qty</th>
                                                    <th>Unit Price</th>
                                                    <th>Total Amount</th>
                                                    <th>Due Date</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody></tbody>

                                        </table>


                                    </div>



                                    <!-- /.card-body -->
                                </div>
                                <!-- /.card -->
                            </div>



                        </div>


                    </div>



                    <!-- /.card-body -->
                </div>
                <!-- /.card -->
            </div>

            <div class="row">
                <div class="col-sm-12">
                    <div class="row">
                        <div class="col-sm-2">
                            <div class="form-group">
                                <label for="inputName">Description</label>
                                @Html.EditorFor(model => model.description, new { htmlAttributes = new { @placeholder = "Description", @class = "form-control" } })

                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="form-group">
                                <label for="inputProjectLeader">Labour Cost</label>
                                @Html.EditorFor(model => model.tax, new { htmlAttributes = new { @placeholder = "Labour Cost", @class = "form-control" } })
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="form-group">
                                <label for="inputProjectLeader">Transport Cost</label>
                                @Html.EditorFor(model => model.taxAount, new { htmlAttributes = new { @placeholder = "Transport Cost", @class = "form-control" } })
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="form-group">
                                <label for="inputProjectLeader">Total Price</label>
                                @Html.EditorFor(model => model.totalAmount, new { htmlAttributes = new { @placeholder = "Total Price", @class = "form-control", @readonly = true } })
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="form-group">
                                <label for="inputProjectLeader">Paid Amount</label>
                                @Html.EditorFor(model => model.paidAmount, new { htmlAttributes = new { @placeholder = "Paid Amount", @class = "form-control" } })
                            </div>
                        </div>
                        <div class="col-sm-2">
                            <div class="form-group">
                                <label for="inputProjectLeader">Balance Amount</label>
                                @Html.EditorFor(model => model.balanceAmount, new { htmlAttributes = new { @placeholder = "Balance Amount", @class = "form-control",@readonly=true } })
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group">
                                <label for="inputProjectLeader">Due Date</label>
                                @Html.EditorFor(model => model.purchaseduedate, new { htmlAttributes = new { @placeholder = "purchaseduedate", @class = "form-control" } })
                            </div>
                        </div>

                    </div>
                    <div class="row">
                        <div class="col-sm-3">
                            <!-- text input -->
                            <div class="form-group">
                                <label>Payment Mode*:</label>
                                @Html.DropDownListFor(model => model.paymentModeIdx, new SelectList(Model.Paymentmodelist, "idx", "paymentMode"), "Select payment Mode", new { @Class = "form-control font-weight-bold" })
                                @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                            </div>
                            @Html.ValidationMessageFor(model => model.paymentModeIdx, "", new { @class = "text-danger" })
                        </div>

                    </div>


                </div>
            </div>

            <div class="row" id="pymnmode" style="display:none">
                <div class="col-sm-4 bnkchqpaymnt">
                    <!-- text input -->
                    <div class="form-group">
                        <label>Bank Name*:</label>
                        @Html.DropDownListFor(model => model.bankIdx, new SelectList(Model.BankList, "idx", "bankName"), "Select Bank", new { @Class = "form-control font-weight-bold" })
                        @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                    </div>
                    @Html.ValidationMessageFor(model => model.bankIdx, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-4 bnkchqpaymnt">
                    <!-- text input -->
                    <div class="form-group">
                        <label>Account/Cheque Number*:</label>
                        @Html.EditorFor(model => model.accorChequeNumber, new { htmlAttributes = new { @placeholder = "Cheque/Account Number", @class = "form-control" } })
                        @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                    </div>
                    @Html.ValidationMessageFor(model => model.accorChequeNumber, "", new { @class = "text-danger" })
                </div>
                <div class="col-sm-4 bnkpddt">
                    <!-- text input -->
                    <div class="form-group">
                        <label>Paid Date*:</label>
                        @Html.EditorFor(model => model.paidDate, new { htmlAttributes = new { @placeholder = "Cheque Number", @class = "form-control" } })
                        @*<input type="text"  class="form-control" placeholder="@ViewBag.CustomerCode" disabled>*@
                    </div>
                    @Html.ValidationMessageFor(model => model.accorChequeNumber, "", new { @class = "text-danger" })
                </div>
         
                
                
            </div>

        </div>
         
               

</form>  
</div>

<script type="text/javascript">
    // Add To grid
    $("#paymentModeIdx").on('change', function () {
        var ddvaue = $("#paymentModeIdx option:selected").val();
        if (ddvaue == "1") {

        }
        if (ddvaue == "2") {

        }
       
    });
    var errmsg;
    //Add Project Button Event start
    $("#qty").keyup(function () {
        var qtyval = $(this).val();
        var unitpriceval = $("#unitPrice").val();
        var totalamount = qtyval * unitpriceval;
        
        $("#amount").val(totalamount);
    });
    $("#unitPrice").keyup(function () {
        var unitpriceval = $(this).val();
        var qtyval = $("#qty").val();
        var totalamount = qtyval * unitpriceval;
        $("#amount").val(totalamount);
    });
    $("#tax").keyup(function () {
        //var labourcost = $(this).val();
        //var transportcost = $("#taxAount").val();
        //var totalamount = $("#totalAmount").val();
        //var netamount = parseFloat(labourcost) + parseFloat(totalamount) + parseFloat(transportcost);

        //$("#totalAmount").val(netamount);
    });
    $("#taxAount").keyup(function () {
        //var transportcost = $(this).val();
        //var labourcost = $("#tax").val();
        //var totalamount = $("#totalAmount").val();
        //var netamount = parseFloat(transportcost) + parseFloat(totalamount) + parseFloat(labourcost);

        //$("#totalAmount").val(netamount);
    });
    $("#paidAmount").keyup(function () {
        var paidAmount = $(this).val();
        
        var totalamount = $("#totalAmount").val();
        var blnceamnt = parseFloat(totalamount) - parseFloat(paidAmount);

        $("#balanceAmount").val(blnceamnt);
    });
    
    $("#paymentModeIdx").on('change',function () {
        var paymentModeIdx = $('#paymentModeIdx').val();
        if (paymentModeIdx == "1") {
            //$('#chequemode').css('display', 'none');
            //$('#BankMode').css('display', 'none');

            $('#pymnmode').hide();
            
        }
        if (paymentModeIdx == "2") {
            //cheque
            $('#pymnmode').show();//('display', 'block');
           
            $('.bnkpddt').show();
        }
        if (paymentModeIdx == "3") {
            //bank
            $('#pymnmode').show();
            $('.bnkpddt').css('display', 'none');
           
        }
      
    });

    $("#btnaddtogrid").click(function (e) {
        if (!(gridValidation($("#itemIdx option:selected").val()))) {
            alert("Product Alreaty Exist")
            displayerror();
            return;
        }
        

       // alert("hello");
        $('#milestones').show();
        var closebutton = '<input type="button" value="close" id="deleterow" onclick="SomeDeleteRowFunction(this)" class="close" />';
            //'<button type="button" class="close" style="float:left" id="deleterow" aria-label="Close">' +
                         //'<span aria-hidden="true" styel="color:red">&times;</span>' +
                         // '</button>'
        var productname = $("#itemIdx option:selected").text();
        var ProductID = $("#itemIdx option:selected").val();
        var Qty = $("#qty").val();
        var unitprice = $("#unitPrice").val();
        var totalamount = $("#amount").val();
        var duedate = $("#DueDate").val();
        var markup = "<tr><td style='display:none;'>" + ProductID + "</td><td>" + productname + "</td><td>" + Qty + "</td><td>" + unitprice + "</td><td>" + totalamount + "</td><td>"+duedate+"</td><td>" + closebutton + "</td></tr>";
        //if (milestone == "") {
        //    alert("Enter milestone");
        //    return;
        //} else {

        $("#example2 tbody").append(markup);
        var tamount = 0;
        //var labourcost = $("#tax").val();
        //var transportcost = $("#taxAount").val();
        var tamount =parseFloat( $("#totalAmount").val());
        tamount = parseFloat(tamount) + parseFloat(totalamount);//+ parseFloat(labourcost) + parseFloat(transportcost);
        $("#totalAmount").val(tamount);
        // }
        //$("#example1").dataTable();

        
    });
    $('#purchaseDate').change(function () {
        var date = $(this).val();
        console.log(date, 'change')
        var GivenDate = date;
        var CurrentDate = new Date();
        GivenDate = new Date(GivenDate);

        if (GivenDate > CurrentDate) {
            alert('Given date is greater than the current date.');
            var today = moment().format('YYYY-MM-DD');
            $('#purchaseDate').val(today);
        } else {
           // alert('Given date is not greater than the current date.');
        }
    });
    function SomeDeleteRowFunction(o) {
        //alert(id);
        var p = o.parentNode.parentNode;
        p.parentNode.removeChild(p);
        $(this).closest('tr').remove();

    };
    
    function gridValidation(Id) {
        errmsg = [];
        var myTab = $("#example2 tbody");
        var rtrn = true;
        
        // LOOP THROUGH EACH ROW OF THE TABLE AFTER HEADER.
        myTab.find('tr').each(function (i) {
            var $tds = $(this).find('td'),
                productid = $tds.eq(0).text();
            
            if(Id==productid){
                rtrn = false;
                errmsg.push("Product Already exist");
            }
        })
        if ($('#itemIdx option:selected').val() =='') {
            rtrn = false;
            errmsg.push("Select Product");
        }
        if ($('#qty').val() <= 0) {
            rtrn = false;
            errmsg.push("Qty value is zero");
        }
        if ($('#unitPrice').val() <= 0) {
            rtrn = false;
            errmsg.push("unit value is zero");
        }
        //if ($('#DueDate').val() < 0) {
        //    rtrn = false;
        //    errmsg.push("unit value is zero");
        //}
        return rtrn;
    }
    
    function displayerror() {
        for (var i = 0; i < errmsg.length; i++) {
            toastr.options = {
                "closeButton": false,
                "debug": false,
                "newestOnTop": false,
                "progressBar": false,
                "positionClass": "toast-top-center",
                "preventDuplicates": false,
                "onclick": null,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "5000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            }
            Command: toastr["error"](errmsg[i], "")
        }
    }
</script>

    

